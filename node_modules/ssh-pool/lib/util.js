'use strict';

exports.__esModule = true;
exports.exec = exports.series = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.deprecateV3 = deprecateV3;

var _child_process = require('child_process');

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable no-console */
const series = exports.series = (() => {
  var _ref = _asyncToGenerator(function* (tasks) {
    return new Promise(function (resolve, reject) {
      const tasksCopy = [...tasks];
      const next = function next(results) {
        if (tasksCopy.length === 0) {
          resolve(results);
          return;
        }
        const task = tasksCopy.shift();
        task().then(function (result) {
          return next([...results, result]);
        }).catch(reject);
      };
      next([]);
    });
  });

  return function series(_x) {
    return _ref.apply(this, arguments);
  };
})();

const DEFAULT_CMD_OPTIONS = { maxBuffer: 1000 * 1024 };

const exec = exports.exec = (() => {
  var _ref2 = _asyncToGenerator(function* (cmd, options, childModifier) {
    return new Promise(function (resolve, reject) {
      const child = (0, _child_process.exec)(cmd, _extends({}, DEFAULT_CMD_OPTIONS, options), function (error, stdout, stderr) {
        if (error) {
          /* eslint-disable no-param-reassign */
          error.stdout = stdout;
          error.stderr = stderr;
          error.child = child;
          /* eslint-enable no-param-reassign */
          reject(error);
        } else {
          resolve({ child, stdout, stderr });
        }
      });

      if (childModifier) childModifier(child);
    });
  });

  return function exec(_x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
})();

function deprecateV3(...args) {
  console.warn(...args, 'It will break in v3.0.0.');
}