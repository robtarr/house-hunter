'use strict';

let asyncInvoke = (() => {
  var _ref = _asyncToGenerator(function* (env) {
    if (!env.configPath) {
      console.error(_chalk2.default.red('shipitfile not found'));
      exit(1);
    }

    var _program$args = _commander2.default.args;

    const environment = _program$args[0],
          tasks = _program$args.slice(1);

    const shipit = new _Shipit2.default({ environment });

    try {
      /* eslint-disable global-require, import/no-dynamic-import, import/no-dynamic-require */
      const module = require(env.configPath);
      /* eslint-enable global-require, import/no-dynamic-import, import/no-dynamic-require */
      const initialize = typeof module.default === 'function' ? module.default : module;
      yield initialize(shipit);
    } catch (error) {
      console.error(_chalk2.default.red('Could not load async config'));
      throw error;
    }

    if (_commander2.default.tasks === true) {
      logTasks(shipit);
    } else if (_commander2.default.environments === true) {
      logEnvironments(shipit);
    } else {
      // Run the 'default' task if no task is specified
      const runTasks = tasks.length === 0 ? ['default'] : tasks;

      shipit.initialize();

      shipit.on('task_err', function () {
        return exit(1);
      });
      shipit.on('task_not_found', function () {
        return exit(1);
      });

      shipit.start(runTasks);
    }
  });

  return function asyncInvoke(_x) {
    return _ref.apply(this, arguments);
  };
})();

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _interpret = require('interpret');

var _interpret2 = _interopRequireDefault(_interpret);

var _v8flags = require('v8flags');

var _v8flags2 = _interopRequireDefault(_v8flags);

var _liftoff = require('liftoff');

var _liftoff2 = _interopRequireDefault(_liftoff);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _Shipit = require('./Shipit');

var _Shipit2 = _interopRequireDefault(_Shipit);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* eslint-disable no-console */


function exit(code) {
  if (process.platform === 'win32' && process.stdout.bufferSize) {
    process.stdout.once('drain', () => {
      process.exit(code);
    });
    return;
  }

  process.exit(code);
}

_commander2.default.version(_package2.default.version).allowUnknownOption().usage('<environment> <tasks...>').option('--shipitfile <file>', 'Specify a custom shipitfile to use').option('--require <files...>', 'Script required before launching Shipit').option('--tasks', 'List available tasks').option('--environments', 'List available environments');

_commander2.default.parse(process.argv);

if (!process.argv.slice(2).length) {
  _commander2.default.help();
}

function logTasks(shipit) {
  console.log(Object.keys(shipit.tasks).join('\n').trim());
}

function logEnvironments(shipit) {
  console.log(Object.keys(shipit.globalConfig).join('\n').trim());
}

function invoke(env) {
  asyncInvoke(env).catch(error => {
    setTimeout(() => {
      throw error;
    });
  });
}

const cli = new _liftoff2.default({
  name: 'shipit',
  extensions: _interpret2.default.jsVariants,
  v8flags: _v8flags2.default
});
cli.launch({
  configPath: _commander2.default.shipitfile,
  require: _commander2.default.require
}, invoke);